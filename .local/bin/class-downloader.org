#+TITLE: Class Downloader
#+PROPERTY: header-args :tangle class-downloader
#+STARTUP: showall

* Table Of Contents :toc:
- [[#about-this-script][About this script]]
- [[#dependencies][Dependencies]]
- [[#making-the-script-executable][Making the Script Executable]]
- [[#defining-auxiliary-function][Defining Auxiliary Function]]
- [[#input-processing][Input Processing]]
- [[#obtaining-the-information][Obtaining the Information]]
- [[#downloading-the-videos][Downloading the Videos]]
- [[#finishing-up][Finishing up]]

* About this script

This script downloads a video or playlist from a given youtube link and converts them to an MP4 file on the given output folder.

* Dependencies

This script depens on these packages:

- youtube-dl
- dialog
- ffmpeg
- jq
- atomicparsley

* Making the Script Executable

#+BEGIN_SRC shell
#!/usr/bin/env bash
#+END_SRC

* Defining Auxiliary Function

#+BEGIN_SRC shell
BOLD="$(tput bold 2>/dev/null || printf '')"
GREY="$(tput setaf 0 2>/dev/null || printf '')"
RED="$(tput setaf 1 2>/dev/null || printf '')"
GREEN="$(tput setaf 2 2>/dev/null || printf '')"
YELLOW="$(tput setaf 3 2>/dev/null || printf '')"
NO_COLOR="$(tput sgr0 2>/dev/null || printf '')"

info() {
  printf '%s\n' "${BOLD}${GREY}>${NO_COLOR} $*"
}

warn() {
  printf '%s\n' "${YELLOW}! $*${NO_COLOR}"
}

error() {
  printf '%s\n' "${RED}x $*${NO_COLOR}" >&2
}

completed() {
  printf '%s\n' "${GREEN}âœ“${NO_COLOR} $*"
}
#+END_SRC

* Input Processing

This part process the input given to the script and creates the necessary variables and folders.

#+BEGIN_SRC shell
while [ "$#" -gt 0 ]; do
    case "$1" in
    -u | --url)
        INPUT_URL="$2"
        shift 2
        ;;
    -o | --output)
        OUTPUT_DIR="$2"
        shift 2
        ;;
    ,*)
        error "Unrecognized option: $1"
        exit 1
    esac
done

if ! [[ "$INPUT_URL" =~ ^(https?\:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$ ]];
then
    error "The provided URL is not a YouTube URL: $INPUT_URL"
    exit 1
fi
#+END_SRC

* Obtaining the Information

This part gets the basic information for the script and confirms with the user to verify the donwload information.

#+BEGIN_SRC shell
dialog --colors\
    --title "\ZbObtaining Information\Zn"\
    --infobox "Obtaining information from video/playlist.\nThis can take some time, please wait." 4 60
        
IFS=$'\n'
        
TITLE=$(youtube-dl --no-warnings -J "$INPUT_URL" | jq -r '.title')

VIDEO_NAMES=(`youtube-dl --no-warnings --get-title "$INPUT_URL"`)
VIDEO_IDS=(`youtube-dl --no-warnings --get-id "$INPUT_URL"`)

NUMBER_OF_VIDEOS=${#VIDEO_NAMES[@]}

FULL_OUTPUT_PATH=$(realpath -m "$OUTPUT_DIR")

dialog --colors\
    --title "\ZbDownload Confirmation\Zn"\
    --defaultno\
    --yesno "Does this looks alright?\n\ZbVideo/Playlist Name:\Zn $TITLE\n\ZbOutput Directory:\Zn $FULL_OUTPUT_PATH" 7 60

if [ ! $? -eq 0 ];
then
    exit 0
fi
#+END_SRC

* Downloading the Videos

This part downloads the videos and saves them to a temporary forlder before conversion.

#+BEGIN_SRC shell
mkdir -p "$OUTPUT_DIR"

for i in $(seq 0 $((NUMBER_OF_VIDEOS - 1))); do
    info "Downloading: ${VIDEO_NAMES[i]}"

    youtube-dl --newline --no-warnings --recode-video mp4 --merge-output-format mp4 --embed-thumbnail -o "$FULL_OUTPUT_PATH/%(title)s.%(ext)s" -- "${VIDEO_IDS[i]}" | \
        grep --line-buffered -oP "\[download\].*?\K[0-9]+\.[0-9]" | \
        sed -r "s;([0-9]+)\.[0-9];XXX\n${VIDEO_NAMES[i]}\nVideo $((i + 1)) of $NUMBER_OF_VIDEOS\nXXX\n\1;"
done | dialog --colors --title "\ZbDownloading Videos\Zn" --gauge "Starting downloads..." 7 60
#+END_SRC

* Finishing up

#+BEGIN_SRC shell
dialog --colors --title "\ZbDownload Completed\Zn" --msgbox "The download of the videos has finished.\nEnjoy" 6 60
#+END_SRC
